require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const moment = require('moment'); // –£–¥–æ–±–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏, —Å—Ç–∞–≤—å —á–µ—Ä–µ–∑ npm i moment

const HOURS = Array.from({ length: 12 }, (_, i) => 8 + i);
const token = process.env.BOT_TOKEN;
const adminId = process.env.ADMIN_CHAT_ID;
const bot = new TelegramBot(token, { polling: true });


const bookingsDir = path.join(__dirname, 'data');
const bookingsPath = path.join(bookingsDir, 'bookings.json');

const getNext7Days = () => {
	const days = [];
	for (let i = 0; i < 7; i++) {
		const day = moment().add(i, 'days');
		days.push({
			display: day.format('D MMMM'), // "8 –∏—é–Ω—è"
			key: day.format('YYYY-MM-DD')  // "2025-06-08"
		});
	}
	return days;
};
// –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É data, –µ—Å–ª–∏ –Ω–µ—Ç
if (!fs.existsSync(bookingsDir)) {
	fs.mkdirSync(bookingsDir, { recursive: true });
	console.log('–ü–∞–ø–∫–∞ data —Å–æ–∑–¥–∞–Ω–∞');
}

const loadBookings = () => {
	if (!fs.existsSync(bookingsPath)) {
		console.log('–§–∞–π–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç');
		return {};
	}
	try {
		const data = JSON.parse(fs.readFileSync(bookingsPath, 'utf-8'));
		console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –±—Ä–æ–Ω–∏:', data);
		return data;
	} catch (err) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', err);
		return {};
	}
};

const saveBookings = (data) => {
	console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω–∏:', data);
	try {
		fs.writeFileSync(bookingsPath, JSON.stringify(data, null, 2));
	} catch (err) {
		console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', err);
	}
};


// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
	const chatId = msg.chat.id;
	bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–Ω–Ω–∏—Å.', {
		reply_markup: {
			keyboard: [['üéæ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', 'üìã –ú–æ–∏ –±—Ä–æ–Ω–∏']],
			resize_keyboard: true
		}
	});
});


// –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
bot.on('message', (msg) => {
	if (msg.text === 'üéæ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è') {
		const days = getNext7Days();
		bot.sendMessage(msg.chat.id, '–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:', {
			reply_markup: {
				inline_keyboard: days.map(d => [{
					text: d.display,
					callback_data: `date_${d.key}`
				}])
			}
		});
	}
	if (msg.text === 'üìã –ú–æ–∏ –±—Ä–æ–Ω–∏') {
		const chatId = msg.chat.id;
		const userId = msg.from.id;

		const bookings = loadBookings();
		const userBookings = Object.entries(bookings)
			.filter(([_, users]) => users.some(u => u.id === userId));

		if (userBookings.length === 0) {
			bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π.');
			return;
		}

		userBookings.forEach(([slotKey, users]) => {
			const timeStr = slotKey.replace(' ', ' –≤ ');
			bot.sendMessage(chatId, `üìÖ ${timeStr}`, {
				reply_markup: {
					inline_keyboard: [[
						{
							text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
							callback_data: `cancel_${slotKey}`
						}
					]]
				}
			});
		});
	}

});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
bot.on('callback_query', (query) => {
	const chatId = query.message.chat.id;
	const user = query.from;
	const data = query.data;

	if (data.startsWith('date_')) {
		const date = data.replace('date_', '');
		const bookings = loadBookings();

		// –ö–ª—é—á–∏ –≤—Å–µ—Ö –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
		const bookedSlots = Object.keys(bookings)
			.filter(slotKey => slotKey.startsWith(date))
			.map(slotKey => slotKey.split(' ')[1]); // –¥–æ—Å—Ç–∞—ë–º –≤—Ä–µ–º—è –∏–∑ "YYYY-MM-DD HH:mm"

		// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
		const now = moment();
		const selectedDay = moment(date, 'YYYY-MM-DD');

		const timeButtons = HOURS
			.filter(h => {
				const hourStr = h.toString().padStart(2, '0') + ':00';

				// –ï—Å–ª–∏ –¥–µ–Ω—å —Å–µ–≥–æ–¥–Ω—è ‚Äî —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
				if (selectedDay.isSame(now, 'day')) {
					if (h <= now.hour()) return false; // –ø—Ä–æ—à–ª–æ–µ –≤—Ä–µ–º—è ‚Äî –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
				}

				// –£–±–∏—Ä–∞–µ–º —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
				return !bookedSlots.includes(hourStr);
			})
			.map(h => {
				const hourStr = h.toString().padStart(2, '0') + ':00';
				return [{
					text: hourStr,
					callback_data: `book_${date}_${hourStr}`
				}];
			});


		if (timeButtons.length === 0) {
			bot.sendMessage(chatId, `–í—Å–µ —Å–ª–æ—Ç—ã –Ω–∞ ${date} –∑–∞–Ω—è—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.`);
		} else {
			bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –¥–ª—è ${date}:`, {
				reply_markup: { inline_keyboard: timeButtons }
			});
		}
	}


	// –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
	if (data.startsWith('book_')) {
		const [_, date, time] = data.split('_'); // —Ä–∞–∑–±–∏—Ä–∞–µ–º 'book_2025-06-08_08:00'

		const bookings = loadBookings();
		const slotKey = `${date} ${time}`;

		if (!bookings[slotKey]) bookings[slotKey] = [];

		const alreadyBooked = bookings[slotKey].some(u => u.id === user.id);
		if (alreadyBooked) {
			bot.answerCallbackQuery(query.id, { text: '–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç.' });
			return;
		}

		bookings[slotKey].push({
			id: user.id,
			name: `${user.first_name} ${user.last_name || ''}`.trim(),
			username: user.username
		});

		saveBookings(bookings);

		bot.sendMessage(chatId, `‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ ${date} –≤ ${time}!`);
		bot.sendMessage(adminId, `üéæ –ù–æ–≤–∞—è –±—Ä–æ–Ω—å:\nüìÖ ${date}\n‚è∞ ${time}\nüë§ ${user.first_name} (@${user.username})`);

		bot.answerCallbackQuery(query.id);
	}
	if (data.startsWith('cancel_')) {
		const slotKey = data.replace('cancel_', '');
		const bookings = loadBookings();

		if (!bookings[slotKey]) {
			bot.answerCallbackQuery(query.id, { text: '–≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –ø—É—Å—Ç.' });
			return;
		}

		// –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ª–æ—Ç–∞
		bookings[slotKey] = bookings[slotKey].filter(u => u.id !== user.id);

		// –ï—Å–ª–∏ —Å–ª–æ—Ç —Å—Ç–∞–ª –ø—É—Å—Ç–æ–π ‚Äî —É–¥–∞–ª–∏–º –≤–æ–æ–±—â–µ
		if (bookings[slotKey].length === 0) {
			delete bookings[slotKey];
		}

		saveBookings(bookings);

		bot.sendMessage(chatId, `‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ ${slotKey.replace(' ', ' –≤ ')} –æ—Ç–º–µ–Ω–µ–Ω–∞.`);
		bot.sendMessage(adminId, `üîï –û—Ç–º–µ–Ω–∞:\nüìÖ ${slotKey}\nüë§ ${user.first_name} (@${user.username})`);

		bot.answerCallbackQuery(query.id);
	}
});


// –ö–æ–º–∞–Ω–¥–∞ /admin
bot.onText(/\/admin/, (msg) => {
	if (msg.from.id.toString() !== adminId) return;

	const bookings = loadBookings();
	let msgText = 'üìã –ó–∞–ø–∏—Å–∏:\n\n';
	for (const [date, users] of Object.entries(bookings)) {
		msgText += `üìÖ ${date}:\n`;
		users.forEach(u => {
			msgText += `‚Äî ${u.name} (@${u.username})\n`;
		});
		msgText += '\n';
	}

	bot.sendMessage(msg.chat.id, msgText || '–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è.');
});
